name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_DEFAULT_REGION: us-east-1
  AWS_BACKUP_REGION: eu-central-1
  CLOUDFLARE_ACCOUNT_ID: 895762025d37fc687ecd72d7cc80204a
  CLOUDFLARE_ZONE_ID: c192cf8ac042c681023493c52edd44c8

jobs:
  setup:
    runs-on: ubuntu-latest-xl
    steps:
      - name: Setup Deno environment
        uses: denolib/setup-deno@v2.3.0
        with:
          deno-version: v1.6.2

  test:
    needs: setup
    runs-on: ubuntu-latest-xl
    steps:
      - uses: actions/checkout@v2

      - name: Format
        run: |
          deno fmt --check
          cd terraform && terraform fmt -check -recursive

      - name: Lint
        run: deno lint --unstable

      - name: Docker build
        run: make build

      - name: Test
        run: make test

  build:
    needs: test
    runs-on: ubuntu-latest-xl
    steps:
      - name: Validate
        run: |
          terraform init -backend=false
          terraform validate
        working-directory: terraform

      - name: Push container to ECR (prod)
        if: github.ref == 'refs/heads/main'
        run: |
          ECR_ID=$(aws sts get-caller-identity --query Account --output text).dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
          IMAGE_ID=$ECR_ID/deno_registry2:$GITHUB_RUN_ID
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_ID
          docker tag deno_registry2:latest $IMAGE_ID
          docker push $IMAGE_ID
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Create terraform plan (prod)
        if: github.ref == 'refs/heads/main'
        run: |
          terraform init -backend-config bucket=$TERRAFORM_STATE_BUCKET -backend-config "region=$AWS_DEFAULT_REGION"
          terraform plan \
            -var env=prod \
            -var mongodb_uri=$MONGODB_URI \
            -var api_domain=$API_DOMAIN \
            -var cdn_domain=$CDN_DOMAIN \
            -var certificate_arn=$CERTIFICATE_ARN \
            -var region=$AWS_DEFAULT_REGION \
            -var backup_region=$AWS_BACKUP_REGION \
            -var cloudflare_account_id=$CLOUDFLARE_ACCOUNT_ID \
            -var cloudflare_zone_id=$CLOUDFLARE_ZONE_ID \
            -var github_token=${{ secrets.GH_TOKEN }} \
            -var docker_tag=$GITHUB_RUN_ID \
            -out plan.tfplan
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          API_DOMAIN: api.deno.land
          CDN_DOMAIN: cdn.deno.land
          CERTIFICATE_ARN: arn:aws:acm:us-east-1:035475582903:certificate/1c3bd085-95ef-4c27-ae09-18d27825739c
          TERRAFORM_STATE_BUCKET: deno-registry2-prod-terraform-state-b3a31d16
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        working-directory: terraform
  
  deploy:
    needs: build
    runs-on: ubuntu-lastest-xl
    steps:
      - name: Deploy infrastructure (prod)
        if: github.ref == 'refs/heads/main'
        run: terraform apply -parallelism=3 plan.tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        working-directory: terraform

      - name: Run Smoke Tests (prod)
        run: sleep 30 && deno run --allow-net tools/smoketest.js
        if: github.ref == 'refs/heads/main'
